<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" 
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" 
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
	xmlns:sap="http://www.mulesoft.org/schema/mule/sap" 
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" 
	xmlns:http="http://www.mulesoft.org/schema/mule/http" 
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/sap http://www.mulesoft.org/schema/mule/sap/current/mule-sap.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">
	<context:property-placeholder location="common.properties, mule.${mule.env}.properties" />
    <http:listener-config name="system-api-httpListenerConfig" host="0.0.0.0" port="${http.port}" doc:name="HTTP Listener Configuration"/>
    <apikit:config name="system-api-config" raml="system-api.raml" consoleEnabled="true" consolePath="console" doc:name="Router"/>
    
    <sap:connector name="SAP" jcoAsHost="${sap.jco.ashost}"
		jcoUser="${sap.jco.user}" jcoPasswd="${sap.jco.passwd}" jcoSysnr="${sap.jco.sysnr}"
		jcoClient="${sap.jco.client}" jcoLang="${sap.jco.lang}"
		validateConnections="true"
		doc:name="SAP" />
		
	
    <flow name="system-api-main">
        <http:listener config-ref="system-api-httpListenerConfig" path="/api/*" doc:name="HTTP"/>
        <apikit:router config-ref="system-api-config" doc:name="APIkit Router"/>
        <exception-strategy ref="system-api-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>
   
    
    <flow name="get:/accounts:system-api-config">
        <set-variable variableName="queryParams" value="#[message.inboundProperties[&quot;http.query.params&quot;]]" doc:name="Save queryParams"/>
        <choice doc:name="Check params">
            <when expression="#[flowVars.queryParams.name != null]">
                <dw:transform-message doc:name="Prepare BAPI_CUSTOMER_FIND request">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
{
	BAPI_CUSTOMER_FIND: {
		import: {
			"MAX_CNT" : "0",
			"PL_HOLD" : "X"
		},
		tables: {
			SELOPT_TAB: {
				row: {
					TABNAME: "KNA1",
					FIELDNAME: "NAME1",
					FIELDVALUE: "*" ++ flowVars.queryParams.name ++ "*"
				}
			}
		}
	}
}]]></dw:set-payload>
                </dw:transform-message>
                <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="function" functionName="BAPI_CUSTOMER_FIND" xmlVersion="2" outputXml="true" evaluateFunctionResponse="true" responseTimeout="10000" doc:name="BAPI_CUSTOMER_FIND"/>


                <dw:transform-message doc:name="Transform response to Java Maps">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.BAPI_CUSTOMER_FIND.tables.RESULT_TAB.*row 
filter ($.CUSTOMER != "" and $.DEL_FLAG_G != "X")
map {
	name : $.FIELDVALUE,
	id   : $.CUSTOMER
}]]></dw:set-payload>
                </dw:transform-message>


                <set-variable variableName="output" value="#[[]]" doc:name="Initialize output array"/>
                <foreach doc:name="For Each Customer">
                    <set-variable variableName="id" value="#[payload.id]" doc:name="current ID"/>
                    <flow-ref name="getCustomerDetails" doc:name="Call getCustomerDetails"/>
                    <dw:transform-message doc:name="Add customer to output array">
                        <dw:set-variable variableName="output"><![CDATA[%dw 1.0
%output application/java
---
flowVars.output + payload]]></dw:set-variable>
                    </dw:transform-message>

                </foreach>
                <set-payload value="#[flowVars.output]" doc:name="Bring output to payload"/>
            </when>
            <when expression="#[flowVars.queryParams.name == null &amp;&amp; flowVars.queryParams.modifiedAfter != null]">

                <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="function" functionName="ZSDFM_CUSTOMER_GETLIST" xmlVersion="2" outputXml="true" evaluateFunctionResponse="true" responseTimeout="10000" doc:name="ZSDFM_CUSTOMER_GETLIST">
                    <sap:definition><![CDATA[<ZSDFM_CUSTOMER_GETLIST>
  	<import>
  		<IV_FROM_DATE>#[flowVars.queryParams.modifiedAfter]</IV_FROM_DATE>
  	</import>
</ZSDFM_CUSTOMER_GETLIST>]]></sap:definition>
                </sap:outbound-endpoint>


                <dw:transform-message doc:name="Transform response to Java Maps">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.ZSDFM_CUSTOMER_GETLIST.tables.T_KNA1.*row map {
	id: $.KUNNR,
	name: $.NAME1,
	billingAddress: {
		street: $.STRAS,
		city: $.ORT01,
		postalCode: $.PSTLZ,
		state: "",
		country: $.LAND1
	},
	lastModifiedDate: $."LAST_MODIF_DATE",
	lastModifiedById: $.AENAM
	
} when payload.ZSDFM_CUSTOMER_GETLIST.tables.T_KNA1 is :object otherwise []]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <otherwise>
                <set-payload value="#[[]]" doc:name="Set Empty array as payload"/>

            </otherwise>
        </choice>


        <expression-component doc:name="Ordering and filtering"><![CDATA[fields = [
"name": "name", 
"lastmodifieddate": "lastModifiedDate"
];


// filter by date
if (!payload.isEmpty() && flowVars.queryParams.modifiedAfter != null) {
	dwScript = "payload filter (($.lastModifiedDate as :datetime) > (\"" + flowVars.queryParams.modifiedAfter + "\" as :datetime))";
	payload = dw(dwScript);
}

if (!payload.isEmpty() && flowVars.queryParams.modifiedBefore != null) {
	dwScript = "payload filter (($.lastModifiedDate as :datetime) < (\"" + flowVars.queryParams.modifiedBefore + "\" as :datetime))";
	payload = dw(dwScript);
}

// ordering
if (!payload.isEmpty() && flowVars.queryParams.orderBy != null) {
	dwScript = "(payload orderBy  $." + fields[flowVars.queryParams.orderBy] + ")";
	if (flowVars.queryParams.order != null && flowVars.queryParams.order.equalsIgnoreCase("desc") ) {
		dwScript += "[-1..0]";
	}
	payload = dw(dwScript);
}

//pagination
if (!payload.isEmpty()   &&   flowVars.queryParams.maxResults != null ) {
	int maxResults = Integer.parseInt(flowVars.queryParams.maxResults);
	
	// return empty array when out of bounds or no results expected
	if (maxResults == 0  ||  (flowVars.queryParams.offset != null && Integer.parseInt(flowVars.queryParams.offset) > payload.size() - 1) ) {
		payload = [];

	} else {	
			int offset = (flowVars.queryParams.offset != null)  ?  Integer.parseInt(flowVars.queryParams.offset)  :  0;
			int limit  =    ((offset + maxResults)   >=   payload.size())    ?   payload.size() - 1   :    ((offset + maxResults) - 1);
			dwScript =  "payload[" + offset +   ".." + limit + "]"; 
			payload = dw(dwScript);
	}
}

]]></expression-component>

        <json:object-to-json-transformer doc:name="Object to JSON"/>
    </flow>
    
    <flow name="post:/accounts:application/json:system-api-config">
        <set-property propertyName="Content-Type" value="application/json" doc:name="Set content-type"/>
        <byte-array-to-object-transformer doc:name="Byte Array to Object"/>
        <set-variable variableName="input" value="#[payload]" encoding="UTF-8" mimeType="application/json" doc:name="Save input"/>
        <enricher source="#[payload.AccountGroup]" target="#[flowVars.accountGroup]" doc:name="Save 'accountGroup'" doc:description="Query account group from the SAP by a customer Id. ">
            <processor-chain doc:name="Processor Chain">
                <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="function" functionName="CUSTOMER_GET_KTOKD" xmlVersion="2" outputXml="true" evaluateFunctionResponse="true" responseTimeout="10000" doc:name="Get Account Group from SAP">
                    <sap:definition><![CDATA[<CUSTOMER_GET_KTOKD type="function">
	<import>
			<IV_KUNNR type="field" sapType="CHAR" sapLength="20">#[message.inboundProperties["http.uri.params"].id]</IV_KUNNR>
	</import>
</CUSTOMER_GET_KTOKD>]]></sap:definition>
                </sap:outbound-endpoint>
                <dw:transform-message doc:name="Transform CUSTOMER_GET_KTOKD to AccountGroup">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
AccountGroup : payload."CUSTOMER_GET_KTOKD".export."EV_KTOKD"
]]></dw:set-payload>
                </dw:transform-message>
            </processor-chain>
        </enricher>
        <enricher source="#[payload]" target="#[flowVars.customerNumber]" doc:name="Save 'customerNumber'" doc:description="If customer account record variable has null payload we need to create new record in SAP and ask for a customer number.">
            <processor-chain doc:name="Processor Chain">
                <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="function" functionName="BAPI_CUSTOMER_GETINTNUMBER" xmlVersion="2" outputXml="true" evaluateFunctionResponse="true" responseTimeout="10000" doc:name="Get Next Customer Number from SAP">
                    <sap:definition><![CDATA[<BAPI_CUSTOMER_GETINTNUMBER type="function">
	<import>
			<ACCOUNTGROUP type="field" sapType="CHAR" sapLength="20">${sap.default.accountGroup}</ACCOUNTGROUP>
	</import>
</BAPI_CUSTOMER_GETINTNUMBER>
]]></sap:definition>
                </sap:outbound-endpoint>

                <dw:transform-message doc:name="Get CUSTOMERID from BAPI_CUSTOMER_GETINTNUMBER">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload."BAPI_CUSTOMER_GETINTNUMBER".export.CUSTOMERID
]]></dw:set-payload>
                </dw:transform-message>
            </processor-chain>
        </enricher>
        <dw:transform-message doc:name="Transform Account to DEBMAS01">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
DEBMAS01 : {
	IDOC @(BEGIN : "1") : {
		"EDI_DC40" @(SEGMENT : "1"):  {
			TABNAM      : "EDI_DC40",
			DIRECT      : "2",
			IDOCTYP     : "DEBMAS01",
			MESTYP      : "DEBMAS",
			SNDPOR      : "MULE01_LS",
			SNDPRT      : "LS",
			SNDPRN      : "MULE01_LS",
			RCVPOR      : "T90CLNT090",
			RCVPRT      : "LS",
			RCVPRN      : "T90CLNT090"
		},
		E1KNA1M @(SEGMENT : "1") : {
			MSGFN       : "009",
			KUNNR       : flowVars.customerNumber,
			KTOKD       : flowVars.accountGroup       when (flowVars.accountGroup != null)   otherwise p('sap.default.accountGroup'),
			LAND1       : "SK",
			NAME1       : flowVars.input.name               when ((sizeOf flowVars.input.name) <= 20)    otherwise flowVars.input.name[0..19],
			(ORT01      : flowVars.input.billingAddress.city)       when (flowVars.input.billingAddress.city != null),
			(PSTLZ      : flowVars.input.billingAddress.postalCode) when (flowVars.input.billingAddress.postalCode != null),
			(STRAS      : flowVars.input.billingAddress.street)     when (flowVars.input.billingAddress.street != null),
			(TELF1      : flowVars.input.phone)             when (flowVars.input.phone != null),
			SPRAS       : "E",
			"SPRAS_ISO" : "EN"
		}
	}
}]]></dw:set-payload>
        </dw:transform-message>

        <object-to-string-transformer doc:name="Object to String"/>

        <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="idoc" functionName="DEBMAS01" xmlVersion="2" outputXml="true" responseTimeout="10000" doc:name="Insert Customer in SAP"/>
        <set-property propertyName="location" value="#[ 'http://' + '${api.domain}' + ':' + '${http.port}' + '${api.basePath}' + '/accounts/' + flowVars.customerNumber ]" doc:name="Set Location Header"/>
        <dw:transform-message doc:name="Build response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{ 
	id: flowVars.customerNumber,
  	name: flowVars.input.name
}]]></dw:set-payload>
        </dw:transform-message>

    </flow>
    
    <flow name="get:/accounts/{id}:system-api-config">
        <set-variable variableName="id" value="#[message.inboundProperties.'http.uri.params'.id]" doc:name="Save id"/>
        <flow-ref name="checkCustomer" doc:name="Call checkCustomer"/>
        <choice doc:name="Does customer exist?">
            <when expression="#[ flowVars.customerExists ]">
                <flow-ref name="getCustomerDetails" doc:name="Call getCustomerDetails"/>
                <json:object-to-json-transformer doc:name="Object to JSON"/>
            </when>
            <otherwise>
                <set-property propertyName="http.status" value="#[404]" doc:name="Resource Not Found"/>
                <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
            </otherwise>
        </choice>


    </flow>
   
    
    <flow name="put:/accounts/{id}:application/json:system-api-config">
        <set-property propertyName="Content-Type" value="application/json" doc:name="Set content-type"/>
        <set-variable variableName="input" value="#[payload]" encoding="UTF-8" mimeType="application/json" doc:name="Save input"/>
        <flow-ref name="checkCustomer" doc:name="Call checkCustomer"/>
        <choice doc:name="Does customer exist?">
            <when expression="#[flowVars.customerExists]">
                <enricher source="#[payload]" target="#[flowVars.accountGroup]" doc:name="save 'accountGroup'" doc:description="Query account group from the SAP by a customer Id. ">
                    <processor-chain doc:name="Processor Chain">
                        <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="function" functionName="CUSTOMER_GET_KTOKD" xmlVersion="2" outputXml="true" evaluateFunctionResponse="true" responseTimeout="10000" doc:name="Get Account Group from SAP">
                            <sap:definition><![CDATA[<CUSTOMER_GET_KTOKD type="function">
	<import>
			<IV_KUNNR type="field" sapType="CHAR" sapLength="20">#[flowVars.id]</IV_KUNNR>
	</import>
</CUSTOMER_GET_KTOKD>]]></sap:definition>
                        </sap:outbound-endpoint>

                        <dw:transform-message doc:name="Transform CUSTOMER_GET_KTOKD to AccountGroup">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload."CUSTOMER_GET_KTOKD".export."EV_KTOKD"
]]></dw:set-payload>
                        </dw:transform-message>
                    </processor-chain>
                </enricher>
                <dw:transform-message doc:name="Transform Account to DEBMAS01">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
DEBMAS01 : {
	IDOC @(BEGIN : "1") : {
		"EDI_DC40" @(SEGMENT : "1"):  {
			TABNAM      : "EDI_DC40",
			DIRECT      : "2",
			IDOCTYP     : "DEBMAS01",
			MESTYP      : "DEBMAS",
			SNDPOR      : "MULE01_LS",
			SNDPRT      : "LS",
			SNDPRN      : "MULE01_LS",
			RCVPOR      : "T90CLNT090",
			RCVPRT      : "LS",
			RCVPRN      : "T90CLNT090"
		},
		E1KNA1M @(SEGMENT : "1") : {
			MSGFN       : "005",
			KUNNR       : flowVars.id,
			KTOKD       : flowVars.accountGroup       when (flowVars.accountGroup != null)   otherwise p('sap.default.accountGroup'),
			LAND1       : "US",
			NAME1       : flowVars.input.name               when ((sizeOf flowVars.input.name) <= 20)    otherwise flowVars.input.name[0..19],
			(ORT01      : flowVars.input.billingAddress.city)       when (flowVars.input.billingAddress.city != null),
			(PSTLZ      : flowVars.input.billingAddress.postalCode) when (flowVars.input.billingAddress.postalCode != null),
			(STRAS      : flowVars.input.billingAddress.street)     when (flowVars.input.billingAddress.street != null),
			(TELF1      : flowVars.input.phone)             when (flowVars.input.phone != null),
			SPRAS       : "E",
			"SPRAS_ISO" : "EN"
		}
	}
}]]></dw:set-payload>
                </dw:transform-message>
                <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="idoc" functionName="DEBMAS01" xmlVersion="2" outputXml="true" responseTimeout="10000" doc:name="Update Customer in SAP"/>
                <dw:transform-message doc:name="Prepare JSON output structure">
					<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	status: "OK"
}]]></dw:set-payload>
				</dw:transform-message>
            </when>
            <otherwise>
                <set-property propertyName="http.status" value="#[404]" doc:name="Resource Not Found"/>
                <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
            </otherwise>
        </choice>


    </flow>
    
        
    
    <flow name="delete:/accounts/{id}:system-api-config">
        <flow-ref name="checkCustomer" doc:name="Call checkCustomer"/>
        <choice doc:name="Does customer exist?">
            <when expression="#[flowVars.customerExists]">
                <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="function" functionName="ZCAFM_CUSTOMER_DELETE" xmlVersion="2" outputXml="true" evaluateFunctionResponse="true" responseTimeout="10000" doc:name="Delete Customer">
                    <sap:definition><![CDATA[<ZCAFM_CUSTOMER_DELETE type="function">
	<import>
			<PI_CUSTOMER type="field">#[flowVars.id]</PI_CUSTOMER>
	</import>
</ZCAFM_CUSTOMER_DELETE>
]]></sap:definition>
                </sap:outbound-endpoint>
				<dw:transform-message doc:name="Prepare JSON output structure">
                	<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	status: "OK"
}]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <otherwise>
                <set-property propertyName="http.status" value="#[404]" doc:name="Resource Not Found"/>
                <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
            </otherwise>
        </choice>

    </flow>
    <sub-flow name="getCustomerDetails">
        <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="function" functionName="ZSDFM_CUSTOMER_GETLIST" xmlVersion="2" outputXml="true" evaluateFunctionResponse="true" responseTimeout="10000" doc:name="Get additional details of customer">
            <sap:definition><![CDATA[<ZSDFM_CUSTOMER_GETLIST>
  	<import>
  		<IV_CUST_ID>#[flowVars.id]</IV_CUST_ID>
  	</import>
</ZSDFM_CUSTOMER_GETLIST>]]></sap:definition>
        </sap:outbound-endpoint>
        <dw:transform-message doc:name="Transform response array of maps">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload."ZSDFM_CUSTOMER_GETLIST".tables."T_KNA1".*row map {
	id              	: $.KUNNR,
	name            	: $.NAME1,
	billingAddress: {
		street     		: $.STRAS,
		city       		: $.ORT01,
		postalCode 		: $.PSTLZ,
		state      		: null,
		country    		: $.LAND1
	},
	lastModifiedDate	: $."LAST_MODIF_DATE",
	lastModifiedById	: $.AENAM
})[0] when payload."ZSDFM_CUSTOMER_GETLIST".tables."T_KNA1" is :object otherwise null]]></dw:set-payload>
        </dw:transform-message>
    </sub-flow>
    <sub-flow name="checkCustomer">
        <sap:outbound-endpoint exchange-pattern="request-response" connector-ref="SAP" type="function" functionName="BAPI_CUSTOMER_FIND" xmlVersion="2" outputXml="true" evaluateFunctionResponse="true" responseTimeout="10000" doc:name="BAPI_CUSTOMER_FIND">
            <sap:definition><![CDATA[<BAPI_CUSTOMER_FIND>
  <tables>
    <SELOPT_TAB>
      <row>
        <TABNAME>KNA1</TABNAME>
        <FIELDNAME>KUNNR</FIELDNAME>
        <FIELDVALUE>#[message.inboundProperties["http.uri.params"].id]</FIELDVALUE>
      </row>
    </SELOPT_TAB>
  </tables>
</BAPI_CUSTOMER_FIND>]]></sap:definition>
        </sap:outbound-endpoint>

        <dw:transform-message doc:name="Check customer response">
            <dw:set-variable variableName="customerExists"><![CDATA[%dw 1.0
%output application/java
---
true when (payload."BAPI_CUSTOMER_FIND".tables."RESULT_TAB".*row[0]."CUSTOMER" != "" 
		   and 
           payload."BAPI_CUSTOMER_FIND".tables."RESULT_TAB".*row[0]."DEL_FLAG_G" != "X")
otherwise false    ]]></dw:set-variable>
        </dw:transform-message>
    </sub-flow>

    <apikit:mapping-exception-strategy name="system-api-apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
    </apikit:mapping-exception-strategy>

</mule>
